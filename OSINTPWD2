import argparse
import requests
import sherlock
from dotenv import load_dotenv
import sys

# Load environment variables
load_dotenv()

def search_sherlock(query, sites=None):
    """
    Search for the given query on social media platforms using Sherlock.
    """
    results = sherlock.check(query, sites=sites)
    return results

def check_pwned(email):
    """
    Check if the given email has been pwned using the Have I Been Pwned API.
    """
    url = f"https://haveibeenpwned.com/api/v3/breachedaccount/{email}"
    headers = {
        "hibp-api-key": sys.getenv("HIBP_API_KEY")
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    return None

def search_breach_directory(email):
    """
    Search for the given email using the Breach Directory API.
    """
    url = "https://breachdirectory.p.rapidapi.com/"
    querystring = {"func": "auto", "term": email}
    headers = {
        "X-RapidAPI-Key": sys.getenv("BREACH_DIRECTORY_API_KEY"),
        "X-RapidAPI-Host": "breachdirectory.p.rapidapi.com"
    }
    response = requests.get(url, headers=headers, params=querystring)
    if response.status_code == 200:
        return response.json()
    return None

def display_pwned_info(email, pwned_data):
    """
    Display information about breaches from Have I Been Pwned.
    """
    if pwned_data and "Breaches" in pwned_data:
        print(f"Email address {email} has been pwned in the following breaches (Have I Been Pwned):")
        for breach in pwned_data["Breaches"]:
            print(f"- {breach['Name']} (pwned count: {breach['PwnedCount']})")
    else:
        print(f"Email address {email} not found in Have I Been Pwned.")

def display_breach_directory_info(email, breach_data):
    """
    Display information about breaches from the Breach Directory API.
    """
    if breach_data and "breaches" in breach_data:
        print(f"Email address {email} found in the following breaches in Breach Directory:")
        for breach in breach_data["breaches"]:
            print(f"- {breach['Title']}")
    else:
        print(f"No breaches found in Breach Directory for {email}.")

def main():
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description="Search for usernames and associated emails, then check for breaches.")
    parser.add_argument("query", help="The username or email address to search for.")
    parser.add_argument("-u", "--username", action="store_true", help="Search for a username instead of an email address.")
    parser.add_argument("-s", "--sites", nargs="+", metavar="site", help="Specify the sites to search. Use 'all' to search all sites.")
    args = parser.parse_args()

    query_type = "username" if args.username else "email"
    query = args.query.lower()

    # Check if the query is an email
    if "@" in query and not args.username:
        # Check if the email has been pwned
        pwned = check_pwned(query)
        display_pwned_info(query, pwned)

        # Use the Breach Directory API
        breach_data = search_breach_directory(query)
        display_breach_directory_info(query, breach_data)

    # Search for the query on the specified sites using Sherlock
    sites = args.sites if args.sites else None
    results = search_sherlock(query, sites)
    display_sherlock_results(query_type, query, results)

if __name__ == "__main__":
    main()
