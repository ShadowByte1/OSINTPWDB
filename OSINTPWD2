import argparse
from json import loads
from re import search
from time import sleep
from requests import get
from os import path

G, C, Y, R, W = '\033[92m', '\033[96m', '\033[93m', '\033[91m', '\033[0m'

useragent = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
response_codes = {
    200: 'OK',
    400: 'Bad Request',
    401: 'Unauthorized',
    403: 'Forbidden',
    404: 'Not Found',
    429: 'Too Many Requests'
}

def main():
    parser = argparse.ArgumentParser(description='OSINT tool to check if an email has been breached.')
    parser.add_argument('-e', '--email', dest='email', help='Email address to check', required=True)
    args = parser.parse_args()
    
    global addr
    addr = args.email
    global check_domain
    check_domain = addr.split('@')[-1]

    global nodumps
    nodumps = False

    global filepawned
    filepawned = None

    haveibeenpwned_check()
    sleep(1)  # Adding a small delay before checking Breached Directory
    breached_directory_check()

def haveibeenpwned_check():
    print(f'{G}[+] {C}Checking Have I Been Pwned: {W}{addr}')
    rqst = get(
        f'https://haveibeenpwned.com/api/v3/breachedaccount/{addr}',
        headers=useragent,
        params={'truncateResponse': 'false'},
        timeout=10
    )
    sc = rqst.status_code
    for code, desc in response_codes.items():
        if sc == code:
            if sc == 200:
                print(f'{G}[ pwned ]{W}')
                json_out = rqst.content.decode('utf-8', 'ignore')
                simple_out = loads(json_out)
                print(f'{G}[+] {C}Total Breaches : {W}{len(simple_out)}')
                for item in simple_out:
                    print(f'\n' \
                          f'{G}[+] {C}Breach      : {W}{item["Title"]} \n' \
                          f'{G}[+] {C}Domain      : {W}{item["Domain"]} \n' \
                          f'{G}[+] {C}Date        : {W}{item["BreachDate"]} \n' \
                          f'{G}[+] {C}BreachedInfo: {W}{item["DataClasses"]} \n' \
                          f'{G}[+] {C}Fabricated  : {W}{item["IsFabricated"]} \n' \
                          f'{G}[+] {C}Verified    : {W}{item["IsVerified"]} \n' \
                          f'{G}[+] {C}Retired     : {W}{item["IsRetired"]} \n' \
                          f'{G}[+] {C}Spam        : {W}{item["IsSpamList"]}'
                          )
                    print(f'-----\n')
                if not nodumps:
                    dump()
            elif sc == 404:
                print(f' {R}[ not pwned ]{W}')
            elif sc == 429:
                retry_sleep = float(rqst.headers['Retry-After'])
                print(f' {Y}[ retry in {retry_sleep}s]{W}')
                sleep(retry_sleep)
                haveibeenpwned_check()
            else:
                print(f'\n\n{R}[-] {C}Status {code} : {W}{desc}')

def breached_directory_check():
    print(f'{G}[+] {C}Checking Breached Directory status for {W}{addr}')
    rqst = get(
        f'https://breachdirectory.com/api/pwned?Name={addr}',
        headers=useragent,
        timeout=10
    )
    sc = rqst.status_code
    for code, desc in response_codes.items():
        if sc == code:
            if sc == 200:
                print(f'{G}[ pwned in Breached Directory ]{W}')
                if filepawned is not None:
                    with open(filepawned, 'a') as fileout:
                        fileout.write(addr + '\n')
            elif sc == 404:
                print(f' {R}[ not pwned in Breached Directory ]{W}')
            elif sc == 429:
                retry_sleep = float(rqst.headers['Retry-After'])
                print(f' {Y}[ retry in {retry_sleep}s]{W}')
                sleep(retry_sleep)
                breached_directory_check()
            else:
                print(f'\n\n{R}[-] {C}Status {code} : {W}{desc}')

def dump():
    print(f'{G}[+] {C}Password Dumps : {W}')
    rqst = get(
        f'https://haveibeenpwned.com/api/v3/breachedaccount/{addr}',
        headers=useragent,
        params={'truncateResponse': 'false'},
        timeout=10
    )
    sc = rqst.status_code
    for code, desc in response_codes.items():
        if sc == code:
            if sc == 200:
                json_out = rqst.content.decode('utf-8', 'ignore')
                simple_out = loads(json_out)
                for item in simple_out:
                    print(f'\n' \
                          f'{G}[+] {C}Breach      : {W}{item["Title"]} \n' \
                          f'{G}[+] {C}Domain      : {W}{item["Domain"]} \n' \
                          f'{G}[+] {C}Date        : {W}{item["BreachDate"]} \n' \
                          f'{G}[+] {C}BreachedInfo: {W}{item["DataClasses"]} \n' \
                          f'{G}[+] {C}Fabricated  : {W}{item["IsFabricated"]} \n' \
                          f'{G}[+] {C}Verified    : {W}{item["IsVerified"]} \n' \
                          f'{G}[+] {C}Retired     : {W}{item["IsRetired"]} \n' \
                          f'{G}[+] {C}Spam        : {W}{item["IsSpamList"]}'
                          )
                    print(f'-----\n')
            elif sc == 404:
                print(f' {R}[ not pwned ]{W}')
            elif sc == 429:
                retry_sleep = float(rqst.headers['Retry-After'])
                print(f' {Y}[ retry in {retry_sleep}s]{W}')
                sleep(retry_sleep)
                dump()
            else:
                print(f'\n\n{R}[-] {C}Status {code} : {W}{desc}')

main()
