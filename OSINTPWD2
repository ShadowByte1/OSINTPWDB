import argparse
import requests
import sherlock
from dotenv import load_dotenv
import sys

# Load environment variables
load_dotenv()

def search_sherlock(query, sites=None):
    """
    Search for the given query on social media platforms using Sherlock.
    """
    sherlock_tool = sherlock.Sherlock()
    if sites:
        sherlock_tool.site_list = sites
    return sherlock_tool.search(query)

def check_pwned(email):
    """
    Check if the given email has been pwned using the Have I Been Pwned API.
    """
    url = f"https://haveibeenpwned.com/api/v3/breachedaccount/{email}"
    headers = {
        "hibp-api-key": sys.getenv("HIBP_API_KEY")
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    return None

def search_breach_directory(email):
    """
    Search for the given email using the Breach Directory API.
    """
    url = "https://breachdirectory.p.rapidapi.com/"
    querystring = {"func": "auto", "term": email}
    headers = {
        "X-RapidAPI-Key": sys.getenv("BREACH_DIRECTORY_API_KEY"),
        "X-RapidAPI-Host": "breachdirectory.p.rapidapi.com"
    }
    response = requests.get(url, headers=headers, params=querystring)
    if response.status_code == 200:
        return response.json()
    return None

def main():
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description="Search for a username or email address on social media platforms and check if the email has been pwned.")
    parser.add_argument("query", help="The username or email address to search for.")
    parser.add_argument("-u", action="store_true", help="Search for a username instead of an email address.")
    parser.add_argument("-s", nargs="+", metavar=("site",), help="Specify the sites to search. Use 'all' to search all sites.")
    args = parser.parse_args()

    if args.u:
        query_type = "username"
        query = args.query
    else:
        query_type = "email"
        query = args.query.lower()

    # Check if the email has been pwned
    pwned = check_pwned(query)
    if pwned and "Breaches" in pwned:
        print(f"Email address {query} has been pwned in the following breaches (Have I Been Pwned):")
        for breach in pwned["Breaches"]:
            print(f"- {breach['Name']} (pwned count: {breach['PwnedCount']})")
    else:
        print(f"Email address {query} not found in Have I Been Pwned.")

    # Use the Breach Directory API
    breach_data = search_breach_directory(query)
    if breach_data and "breaches" in breach_data:
        print(f"Email address {query} found in the following breaches in Breach Directory:")
        for breach in breach_data["breaches"]:
            print(f"- {breach['Title']}")
    else:
        print(f"No breaches found in Breach Directory.")

    # Search for the query on the specified sites using Sherlock
    sites = args.s if args.s else None
    results = search_sherlock(query, sites)

    if results:
        print(f"\nResults for {query_type} {query} on social media platforms:")
        for site, status in results.items():
            print(f"- {site}: {'Found' if status else 'Not Found'}")
    else:
        print(f"No results found for {query_type} {query} on social media platforms.")

if __name__ == "__main__":
    main()
